// <auto-generated />
using System;
using DataAccess.Sql.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Sql.Migrations
{
    [DbContext(typeof(TimeLineContext))]
    [Migration("20190430071828_TimeLine")]
    partial class TimeLine
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Models.AcademicDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AcademicDegreeUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("AcademicDegrees");
                });

            modelBuilder.Entity("DataAccess.Models.AcademicTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("cademicTitleUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("AcademicTitles");
                });

            modelBuilder.Entity("DataAccess.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("Corps");

                    b.Property<int>("CountryId");

                    b.Property<int>("DistrictId");

                    b.Property<int>("HouseNumber");

                    b.Property<int>("Index");

                    b.Property<string>("Phone");

                    b.Property<int>("RegionId");

                    b.Property<string>("RoomNumber");

                    b.Property<int>("StreetId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("RegionId");

                    b.HasIndex("StreetId");

                    b.HasIndex("CountryId", "RegionId", "CityId", "DistrictId", "StreetId", "HouseNumber", "Corps", "RoomNumber")
                        .IsUnique()
                        .HasName("AddressUnique")
                        .HasFilter("[Corps] IS NOT NULL AND [RoomNumber] IS NOT NULL");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DataAccess.Models.BasicInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthday");

                    b.Property<int>("CitizenshipId");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<int>("GenderId");

                    b.Property<string>("LastName");

                    b.Property<int>("MaritalStatusId");

                    b.Property<string>("MiddleName");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CitizenshipId");

                    b.HasIndex("GenderId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("BasicInfoUnique");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("BasicInfos");
                });

            modelBuilder.Entity("DataAccess.Models.Benefits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("BenefitsUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Benefits");
                });

            modelBuilder.Entity("DataAccess.Models.CentralizedTesting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EnrolleId");

                    b.Property<int>("Mark");

                    b.Property<int>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("EnrolleId", "SubjectId")
                        .IsUnique()
                        .HasName("CentralizedTestingUnique");

                    b.ToTable("CentralizedTestings");
                });

            modelBuilder.Entity("DataAccess.Models.Citizenship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("CitizenshipDegreeUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Citizenships");
                });

            modelBuilder.Entity("DataAccess.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DistrictId");

                    b.Property<int>("LocallityTypeId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("LocallityTypeId");

                    b.HasIndex("DistrictId", "LocallityTypeId", "Name")
                        .IsUnique()
                        .HasName("CityUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DataAccess.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("CountryUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DataAccess.Models.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("RegionId");

                    b.HasKey("Id");

                    b.HasIndex("RegionId", "Name")
                        .IsUnique()
                        .HasName("DistrictUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("DataAccess.Models.EducationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("EducationTypeUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("EducationTypes");
                });

            modelBuilder.Entity("DataAccess.Models.Enrolle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AmountBall");

                    b.Property<double>("AverageGradeCertificate");

                    b.Property<int>("BenefitsId");

                    b.Property<DateTime>("DateChanged");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateDeleted");

                    b.Property<bool>("DocumentPickUp");

                    b.Property<bool>("DucementDelivery");

                    b.Property<int>("SpecialityId");

                    b.Property<bool>("Status");

                    b.Property<int>("StudyFormId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BenefitsId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("EnrolleUnique");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("StudyFormId");

                    b.HasIndex("UserId");

                    b.ToTable("Enrolles");
                });

            modelBuilder.Entity("DataAccess.Models.EntranceExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EnrolleId");

                    b.Property<int>("Mark");

                    b.Property<int>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("EnrolleId", "SubjectId")
                        .IsUnique()
                        .HasName("EntranceExamUnique");

                    b.ToTable("EntranceExams");
                });

            modelBuilder.Entity("DataAccess.Models.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("FacultyUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("DataAccess.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("GenderUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("DataAccess.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseOfStudy");

                    b.Property<DateTime>("DateFinish");

                    b.Property<DateTime>("DateStart");

                    b.Property<string>("GroupName");

                    b.Property<int>("Semmester");

                    b.Property<int>("SpecialityId");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId", "GroupName")
                        .IsUnique()
                        .HasName("GroupUnique")
                        .HasFilter("[GroupName] IS NOT NULL");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DataAccess.Models.GroupSubjectList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseOfStudy");

                    b.Property<int>("GroupId");

                    b.Property<int>("Semmester");

                    b.Property<int>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("GroupSubjectListUnique");

                    b.HasIndex("SubjectId");

                    b.ToTable("GroupSubjectLists");
                });

            modelBuilder.Entity("DataAccess.Models.InstitutionName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InstitutionTypeId");

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionTypeId");

                    b.HasIndex("Name", "InstitutionTypeId")
                        .IsUnique()
                        .HasName("InstitutionNameUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("InstitutionNames");
                });

            modelBuilder.Entity("DataAccess.Models.InstitutionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("InstitutionTypeUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("InstitutionTypes");
                });

            modelBuilder.Entity("DataAccess.Models.JobsInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId");

                    b.Property<bool>("ChildChildcareLeave");

                    b.Property<DateTime>("DateCLEnd");

                    b.Property<DateTime>("DateCLStart");

                    b.Property<DateTime>("DateOfCompetition");

                    b.Property<bool>("FullTimeEmployee");

                    b.Property<double>("NumberOfBets");

                    b.Property<bool>("PartTimeJob");

                    b.Property<int>("PositionId");

                    b.Property<bool>("PositionPartTimeJob");

                    b.Property<bool>("Retiree");

                    b.Property<int>("SubdivisionId");

                    b.Property<bool>("Teacher");

                    b.Property<bool>("TempReplacementOfMainEmployee");

                    b.Property<bool>("UnionMember");

                    b.Property<int>("UserId");

                    b.Property<string>("WorkPlace");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PositionId");

                    b.HasIndex("SubdivisionId");

                    b.HasIndex("UserId", "WorkPlace", "SubdivisionId", "PositionId")
                        .IsUnique()
                        .HasName("JobsInfoUnique")
                        .HasFilter("[WorkPlace] IS NOT NULL");

                    b.ToTable("JobsInfos");
                });

            modelBuilder.Entity("DataAccess.Models.LocallityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("LocallityTypeUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("LocallityTypes");
                });

            modelBuilder.Entity("DataAccess.Models.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("MaritalStatusUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("MaritalStatuses");
                });

            modelBuilder.Entity("DataAccess.Models.MillitaryRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MillitaryRegistrationStatusId");

                    b.Property<string>("RecruitmentOffice");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("MillitaryRegistrationUnique");

                    b.HasIndex("MillitaryRegistrationStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("MillitaryRegistrations");
                });

            modelBuilder.Entity("DataAccess.Models.MillitaryRegistrationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("MillitaryRegistrationStatusUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("MillitaryRegistrationStatuses");
                });

            modelBuilder.Entity("DataAccess.Models.PasportDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FinishDate");

                    b.Property<string>("IssuedBy");

                    b.Property<string>("PasportNumber");

                    b.Property<string>("PasportSeries");

                    b.Property<string>("PersonalNumber");

                    b.Property<int>("TLid");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("PasportDetailsUnique");

                    b.HasIndex("UserId");

                    b.ToTable("PasportDetails");
                });

            modelBuilder.Entity("DataAccess.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId");

                    b.Property<int>("PlaceTypeId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PlaceTypeId");

                    b.HasIndex("UserId", "PlaceTypeId")
                        .IsUnique()
                        .HasName("PlaceUnique");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("DataAccess.Models.PlaceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("PlaceTypeUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("PlaceTypes");
                });

            modelBuilder.Entity("DataAccess.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("PositionUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("DataAccess.Models.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("QualificationUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("DataAccess.Models.Reason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ReasonUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Reasons");
                });

            modelBuilder.Entity("DataAccess.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId", "Name")
                        .IsUnique()
                        .HasName("RegionUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("DataAccess.Models.RelativeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("RelativeTypeUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("RelativeTypes");
                });

            modelBuilder.Entity("DataAccess.Models.RelativesAboutInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<int>("RelativeTypeId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RelativeTypeId");

                    b.HasIndex("UserId", "RelativeTypeId", "FirstName", "LastName", "MiddleName")
                        .IsUnique()
                        .HasName("RelativesAboutInfoUnique")
                        .HasFilter("[FirstName] IS NOT NULL AND [LastName] IS NOT NULL AND [MiddleName] IS NOT NULL");

                    b.ToTable("RelativesAboutInfos");
                });

            modelBuilder.Entity("DataAccess.Models.RelativesAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId");

                    b.Property<bool>("AddressType");

                    b.Property<int>("RelativesAboutInfoId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("RelativesAddressUnique");

                    b.HasIndex("RelativesAboutInfoId");

                    b.ToTable("RelativesAddresses");
                });

            modelBuilder.Entity("DataAccess.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("DataAccess.Models.ScientificSpeciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ScientificSpecialityUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("ScientificSpecialities");
                });

            modelBuilder.Entity("DataAccess.Models.ScientificTitleIPD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ScientificTitleIPDUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("ScientificTitleIPDs");
                });

            modelBuilder.Entity("DataAccess.Models.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FacultyId");

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId", "Name")
                        .IsUnique()
                        .HasName("SpecialityUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("DataAccess.Models.SpecialityInfoForEnrolle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountRecruitmentFree");

                    b.Property<int>("AmountRecruitmentPaid");

                    b.Property<DateTime>("DateChanged");

                    b.Property<DateTime>("DateCreated");

                    b.Property<double>("PassingBall");

                    b.Property<int>("SpecialityId");

                    b.Property<int>("StudyFormId");

                    b.Property<int>("TotalAmountRecruitmant");

                    b.HasKey("Id");

                    b.HasIndex("StudyFormId");

                    b.HasIndex("SpecialityId", "StudyFormId", "DateCreated")
                        .IsUnique()
                        .HasName("SpecialityInfoForEnrolleUnique");

                    b.ToTable("SpecialityInfoForEnrolles");
                });

            modelBuilder.Entity("DataAccess.Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.Property<int>("SpecialityId");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId", "Name")
                        .IsUnique()
                        .HasName("SpecializationUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("DataAccess.Models.Statement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateDelevery");

                    b.Property<DateTime>("DateFinish");

                    b.Property<string>("StatementName");

                    b.Property<int>("SubjectId");

                    b.Property<int>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("DateCreated", "SubjectId", "StatementName")
                        .IsUnique()
                        .HasName("StatementUnique")
                        .HasFilter("[StatementName] IS NOT NULL");

                    b.ToTable("Statements");
                });

            modelBuilder.Entity("DataAccess.Models.StatementLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId");

                    b.Property<int>("Mark");

                    b.Property<int>("StatementId");

                    b.Property<int>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StatementId", "GroupId", "StudentId")
                        .IsUnique()
                        .HasName("StatementLineUnique");

                    b.ToTable("StatementLines");
                });

            modelBuilder.Entity("DataAccess.Models.Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("Name");

                    b.Property<int>("StreetTypeId");

                    b.HasKey("Id");

                    b.HasIndex("StreetTypeId");

                    b.HasIndex("CityId", "StreetTypeId", "Name")
                        .IsUnique()
                        .HasName("StreetUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("DataAccess.Models.StreetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("StreetTypeUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("StreetTypes");
                });

            modelBuilder.Entity("DataAccess.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("StudentUnique");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DataAccess.Models.StudentsInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseOfStudy");

                    b.Property<int>("FacultyId");

                    b.Property<int>("GroupId");

                    b.Property<int>("Semmester");

                    b.Property<int>("SpecialityId");

                    b.Property<int>("SpecializationId");

                    b.Property<int>("StudentId");

                    b.Property<int>("StudyFormId");

                    b.Property<int>("StudyTypeId");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasName("StudentsInfoUnique");

                    b.HasIndex("StudyFormId");

                    b.HasIndex("StudyTypeId");

                    b.ToTable("StudentsInfos");
                });

            modelBuilder.Entity("DataAccess.Models.StudyForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("StudyFormUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("StudyForms");
                });

            modelBuilder.Entity("DataAccess.Models.StudyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcademicDegreeId");

                    b.Property<int>("AcademicTitleId");

                    b.Property<DateTime>("DateEnrollment");

                    b.Property<DateTime>("DateFinish");

                    b.Property<DateTime>("DateReEnrollment");

                    b.Property<DateTime>("DateStart");

                    b.Property<int>("EducationTypeId");

                    b.Property<int>("InstitutionNameId");

                    b.Property<string>("LanguageForeign");

                    b.Property<int>("QualificationId");

                    b.Property<int>("ScientificSpecialityId");

                    b.Property<int>("ScientificTitleIPDId");

                    b.Property<int>("SpecializationId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AcademicDegreeId");

                    b.HasIndex("AcademicTitleId");

                    b.HasIndex("EducationTypeId");

                    b.HasIndex("InstitutionNameId");

                    b.HasIndex("QualificationId");

                    b.HasIndex("ScientificSpecialityId");

                    b.HasIndex("ScientificTitleIPDId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("UserId", "EducationTypeId", "InstitutionNameId", "SpecializationId", "QualificationId")
                        .IsUnique()
                        .HasName("StudyInfoUnique");

                    b.ToTable("StudyInfos");
                });

            modelBuilder.Entity("DataAccess.Models.StudyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("StudyTypeUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("StudyTypes");
                });

            modelBuilder.Entity("DataAccess.Models.Subdivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("SubdivisionUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Subdivisions");
                });

            modelBuilder.Entity("DataAccess.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("SubjectUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("DataAccess.Models.SubjectDebtInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseOfStudy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateDebtCancelled");

                    b.Property<int>("Mark");

                    b.Property<int>("Semmester");

                    b.Property<int>("StudentId");

                    b.Property<int>("SubjectId");

                    b.Property<int>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("SubjectDebtInfoUnique");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SubjectDebtInfos");
                });

            modelBuilder.Entity("DataAccess.Models.SubjectInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AllottedStudyTime");

                    b.Property<int>("CourseOfStudy");

                    b.Property<int>("Semmester");

                    b.Property<int>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId", "AllottedStudyTime", "CourseOfStudy", "Semmester")
                        .IsUnique()
                        .HasName("SubjectInfoUnique");

                    b.ToTable("SubjectInfos");
                });

            modelBuilder.Entity("DataAccess.Models.SubjectMarkInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseOfStudy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int>("Mark");

                    b.Property<int>("Semmester");

                    b.Property<int>("StudentId");

                    b.Property<int>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("SubjectMarkInfoUnique");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SubjectMarkInfos");
                });

            modelBuilder.Entity("DataAccess.Models.SubjectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseOfStudy");

                    b.Property<int>("Semmester");

                    b.Property<int>("SubjectId");

                    b.Property<int>("TaskTypeId");

                    b.HasKey("Id");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("SubjectId", "TaskTypeId")
                        .IsUnique()
                        .HasName("SubjectTaskUnique");

                    b.ToTable("SubjectTasks");
                });

            modelBuilder.Entity("DataAccess.Models.SubjectTaskInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseOfStudy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int>("Mark");

                    b.Property<int>("Semmester");

                    b.Property<int>("StatementId");

                    b.Property<int>("StudentId");

                    b.Property<int>("SubjectId");

                    b.Property<int>("TaskTypeId");

                    b.Property<int>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("SubjectTaskInfoUnique");

                    b.HasIndex("StatementId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SubjectTaskInfos");
                });

            modelBuilder.Entity("DataAccess.Models.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("TaskTypeUnique")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("DataAccess.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("TeacherUnique");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("DataAccess.Models.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateEndTraining");

                    b.Property<DateTime>("DateTraining");

                    b.Property<int>("InstitutionNameId");

                    b.Property<int>("WorkersId");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionNameId");

                    b.HasIndex("WorkersId", "DateTraining", "InstitutionNameId", "DateEndTraining")
                        .IsUnique()
                        .HasName("TrainingUnique");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DataAccess.Models.Workers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateChanged");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateDeleted");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("WorkersUnique");

                    b.HasIndex("UserId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("DataAccess.Models.WorkersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateEnd");

                    b.Property<DateTime>("DateOrderNumber");

                    b.Property<DateTime>("DateRegistration");

                    b.Property<DateTime>("DateStart");

                    b.Property<DateTime>("DateTransfer");

                    b.Property<string>("OrderNumber");

                    b.Property<string>("OrderNumberForTransfer");

                    b.Property<int>("ReasonId");

                    b.Property<double>("WorkExperience");

                    b.Property<int>("WorkersId");

                    b.HasKey("Id");

                    b.HasIndex("ReasonId");

                    b.HasIndex("WorkersId")
                        .IsUnique()
                        .HasName("WorkersInfoUnique");

                    b.ToTable("WorkersInfos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DataAccess.Models.Address", b =>
                {
                    b.HasOne("DataAccess.Models.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.District", "District")
                        .WithMany("Addresses")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Region", "Region")
                        .WithMany("Addresses")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Street", "Street")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.BasicInfo", b =>
                {
                    b.HasOne("DataAccess.Models.Citizenship", "Citizenship")
                        .WithMany("BasicInfos")
                        .HasForeignKey("CitizenshipId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Gender", "Gender")
                        .WithMany("BasicInfos")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.MaritalStatus", "MaritalStatus")
                        .WithMany("BasicInfos")
                        .HasForeignKey("MaritalStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("BasicInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.CentralizedTesting", b =>
                {
                    b.HasOne("DataAccess.Models.Enrolle", "Enrolle")
                        .WithMany("CentralizedTestings")
                        .HasForeignKey("EnrolleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Subject", "Subject")
                        .WithMany("CentralizedTestings")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.City", b =>
                {
                    b.HasOne("DataAccess.Models.District", "District")
                        .WithMany("Cities")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.LocallityType", "LocallityType")
                        .WithMany("Cities")
                        .HasForeignKey("LocallityTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.District", b =>
                {
                    b.HasOne("DataAccess.Models.Region", "Region")
                        .WithMany("Districts")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.Enrolle", b =>
                {
                    b.HasOne("DataAccess.Models.Benefits", "Benefits")
                        .WithMany("Enrolles")
                        .HasForeignKey("BenefitsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Speciality", "Speciality")
                        .WithMany("Enrolles")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.StudyForm", "StudyForm")
                        .WithMany("Enrolles")
                        .HasForeignKey("StudyFormId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("Enrolles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.EntranceExam", b =>
                {
                    b.HasOne("DataAccess.Models.Enrolle", "Enrolle")
                        .WithMany("EntranceExams")
                        .HasForeignKey("EnrolleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Subject", "Subject")
                        .WithMany("EntranceExams")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.Group", b =>
                {
                    b.HasOne("DataAccess.Models.Speciality", "Speciality")
                        .WithMany("Groups")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.GroupSubjectList", b =>
                {
                    b.HasOne("DataAccess.Models.Group", "Group")
                        .WithMany("GroupSubjects")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Subject", "Subject")
                        .WithMany("GroupSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.InstitutionName", b =>
                {
                    b.HasOne("DataAccess.Models.InstitutionType", "InstitutionType")
                        .WithMany("InstitutionNames")
                        .HasForeignKey("InstitutionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.JobsInfo", b =>
                {
                    b.HasOne("DataAccess.Models.Address", "WorkAddress")
                        .WithMany("JobsInfos")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Position", "Position")
                        .WithMany("JobsInfos")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Subdivision", "Subdivision")
                        .WithMany("JobsInfos")
                        .HasForeignKey("SubdivisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("JobsInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.MillitaryRegistration", b =>
                {
                    b.HasOne("DataAccess.Models.MillitaryRegistrationStatus", "MillitaryRegistrationStatus")
                        .WithMany("MillitaryRegistrations")
                        .HasForeignKey("MillitaryRegistrationStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("MillitaryRegistrations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.PasportDetails", b =>
                {
                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("PasportDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.Place", b =>
                {
                    b.HasOne("DataAccess.Models.Address", "Address")
                        .WithMany("Places")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.PlaceType", "PlaceType")
                        .WithMany("Places")
                        .HasForeignKey("PlaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("Places")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.Region", b =>
                {
                    b.HasOne("DataAccess.Models.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.RelativesAboutInfo", b =>
                {
                    b.HasOne("DataAccess.Models.RelativeType", "RelativeType")
                        .WithMany("RelativesAboutInfos")
                        .HasForeignKey("RelativeTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("RelativesAboutInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.RelativesAddress", b =>
                {
                    b.HasOne("DataAccess.Models.Address", "Address")
                        .WithMany("RelativesAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.RelativesAboutInfo", "RelativesAboutInfo")
                        .WithMany("RelativesAddresses")
                        .HasForeignKey("RelativesAboutInfoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.Speciality", b =>
                {
                    b.HasOne("DataAccess.Models.Faculty", "Faculty")
                        .WithMany("Specialities")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.SpecialityInfoForEnrolle", b =>
                {
                    b.HasOne("DataAccess.Models.Speciality", "Speciality")
                        .WithMany("SpecialityInfoForEnrolles")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.StudyForm", "StudyForm")
                        .WithMany("SpecialityInfoForEnrolles")
                        .HasForeignKey("StudyFormId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.Specialization", b =>
                {
                    b.HasOne("DataAccess.Models.Speciality", "Speciality")
                        .WithMany("Specializations")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.Statement", b =>
                {
                    b.HasOne("DataAccess.Models.Subject", "Subject")
                        .WithMany("Statements")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Teacher", "Teacher")
                        .WithMany("Statements")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.StatementLine", b =>
                {
                    b.HasOne("DataAccess.Models.Group", "Group")
                        .WithMany("StatementLines")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Statement", "Statement")
                        .WithMany("StatementLines")
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Student", "Student")
                        .WithMany("StatementLines")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.Street", b =>
                {
                    b.HasOne("DataAccess.Models.City", "City")
                        .WithMany("Streets")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.StreetType", "StreetType")
                        .WithMany("Streets")
                        .HasForeignKey("StreetTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.Student", b =>
                {
                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.StudentsInfo", b =>
                {
                    b.HasOne("DataAccess.Models.Faculty", "Faculty")
                        .WithMany("StudentsInfos")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Group", "Group")
                        .WithMany("StudentsInfos")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Speciality", "Speciality")
                        .WithMany("StudentsInfos")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Specialization", "Specialization")
                        .WithMany("StudentsInfos")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Student", "Student")
                        .WithMany("StudentsInfos")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.StudyForm", "StudyForm")
                        .WithMany("StudentsInfos")
                        .HasForeignKey("StudyFormId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.StudyType", "StudyType")
                        .WithMany("StudentsInfos")
                        .HasForeignKey("StudyTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.StudyInfo", b =>
                {
                    b.HasOne("DataAccess.Models.AcademicDegree", "AcademicDegree")
                        .WithMany("StudyInfos")
                        .HasForeignKey("AcademicDegreeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.AcademicTitle", "AcademicTitle")
                        .WithMany("StudyInfos")
                        .HasForeignKey("AcademicTitleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.EducationType", "EducationType")
                        .WithMany("StudyInfos")
                        .HasForeignKey("EducationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.InstitutionName", "InstitutionName")
                        .WithMany("StudyInfos")
                        .HasForeignKey("InstitutionNameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Qualification", "Qualification")
                        .WithMany("StudyInfos")
                        .HasForeignKey("QualificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.ScientificSpeciality", "ScientificSpeciality")
                        .WithMany("StudyInfos")
                        .HasForeignKey("ScientificSpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.ScientificTitleIPD", "ScientificTitleIPD")
                        .WithMany("StudyInfos")
                        .HasForeignKey("ScientificTitleIPDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Specialization", "Specialization")
                        .WithMany("StudyInfos")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("StudyInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.SubjectDebtInfo", b =>
                {
                    b.HasOne("DataAccess.Models.Student", "Student")
                        .WithMany("SubjectDebtInfos")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Subject", "Subject")
                        .WithMany("SubjectDebtInfos")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Teacher", "Teacher")
                        .WithMany("SubjectDebtInfos")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.SubjectInfo", b =>
                {
                    b.HasOne("DataAccess.Models.Subject", "Subject")
                        .WithMany("SubjectInfos")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.SubjectMarkInfo", b =>
                {
                    b.HasOne("DataAccess.Models.Student", "Student")
                        .WithMany("SubjectMarkInfos")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Teacher", "Teacher")
                        .WithMany("SubjectMarkInfos")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.SubjectTask", b =>
                {
                    b.HasOne("DataAccess.Models.Subject", "Subject")
                        .WithMany("SubjectTasks")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.TaskType", "TaskType")
                        .WithMany("SubjectTasks")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.SubjectTaskInfo", b =>
                {
                    b.HasOne("DataAccess.Models.Statement", "Statement")
                        .WithMany("SubjectTaskInfos")
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Student", "Student")
                        .WithMany("SubjectTaskInfos")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Subject", "Subject")
                        .WithMany("SubjectTaskInfos")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.TaskType", "TaskType")
                        .WithMany("SubjectTaskInfos")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Teacher", "Teacher")
                        .WithMany("SubjectTaskInfos")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.Teacher", b =>
                {
                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("Teachers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.Training", b =>
                {
                    b.HasOne("DataAccess.Models.InstitutionName", "InstitutionName")
                        .WithMany("Trainings")
                        .HasForeignKey("InstitutionNameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Workers", "Workers")
                        .WithMany("Trainings")
                        .HasForeignKey("WorkersId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.Workers", b =>
                {
                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("Workers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Models.WorkersInfo", b =>
                {
                    b.HasOne("DataAccess.Models.Reason", "Reason")
                        .WithMany("WorkersInfos")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Models.Workers", "Workers")
                        .WithMany("WorkersInfos")
                        .HasForeignKey("WorkersId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DataAccess.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataAccess.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataAccess.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("DataAccess.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataAccess.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
